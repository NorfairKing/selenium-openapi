openapi: 3.0.2
info:
  title: Selenium WebDriver
  description: '[Selenium WebDriver](https://www.w3.org/TR/webdriver) API specification'
  version: 1.0.0
  contact:
    email: support@aerokube.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: '{protocol}://{host}:{port}{path}'
    description: Selenium WebDriver API
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
        description: Selenium host name
      port:
        description: Selenium port number
        enum:
          - '4444'
          - '4445'
        default: '4444'
      path:
        description: Selenium API base path
        enum:
          - '/wd/hub'
          - '/'
        default: '/wd/hub'
tags:
  - name: misc
    description: Miscellaneous commands
  - name: session
    description: Commands to start, stop a session and adjust its settings
  - name: navigation
    description: Navigation commands
  - name: context
    description: Command contexts
  - name: element
    description: Commands to work with page elements
  - name: document
    description: Document handling commands like getting page source
  - name: cookie
    description: Commands to work with cookies
  - name: action
    description: Actions like clicking on the buttons, moving the mouse and so on
  - name: prompt
    description: Commands to work with alerts
  - name: screenshot
    description: Commands to take screenshots
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  schemas:
    Status:
      type: object
      properties:
        value:
          type: object
          properties:
            ready:
              type: boolean
            message:
              type: string
    Success:
      type: object
      properties:
        value:
          type: object
          nullable: true
    Error:
      type: object
      properties:
        value:
          type: object
          properties:
            error:
              type: string
            message:
              type: string
            stacktrace:
              type: string
            data:
              type: object
              additionalProperties:
                type: object
    CapabilityValue:
      oneOf:
        - type: string
        - type: integer
        - type: boolean
        - type: object
    Capabilities:
      type: object
      additionalProperties:
        type: object
        $ref: '#/components/schemas/CapabilityValue'
    NewSessionRequest:
      type: object
      properties:
        capabilities:
          type: object
          properties:
            alwaysMatch:
              type: object
              $ref: '#/components/schemas/Capabilities'
            firstMatch:
              type: array
              items:
                $ref: '#/components/schemas/Capabilities'
    NewSessionResponse:
      type: object
      properties:
        value:
          type: object
          properties:
            sessionId:
              type: string
            capabilities:
              type: string
              $ref: '#/components/schemas/Capabilities'
    UrlRequest:
      type: object
      properties:
        capabilities:
          type: object
          properties:
            url:
              type: string
paths:
  /status:
    get:
      tags:
        - misc
      summary: Gets Selenium API status information
      operationId: getStatus
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  /session:
    post:
      tags:
        - session
      summary: Creates new Selenium session
      security:
        - BasicAuth: []
      operationId: createSession
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewSessionRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewSessionResponse'
        500:
          description: new session error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session/{sessionId}:
    delete:
      tags:
        - session
      summary: Deletes existing Selenium session
      operationId: deleteSession
      parameters:
        - name: "sessionId"
          in: "path"
          description: "Requested session ID"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: invalid session id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session/{sessionId}/url:
    post:
      tags:
        - navigation
      summary: Navigates to URL
      operationId: navigateTo
      parameters:
        - name: "sessionId"
          in: "path"
          description: "Requested session ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: invalid session id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session/{sessionId}/timeouts:
    post:
      tags:
        - session
      summary: Adjusts session timeouts
      operationId: setTimeouts
      parameters:
        - name: "sessionId"
          in: "path"
          description: "Requested session ID"
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UrlRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: invalid session id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /session/{sessionId}/screenshot:
    get:
      tags:
        - screenshot
      summary: Takes page screenshot
      operationId: takeScreenshot
      parameters:
        - name: "sessionId"
          in: "path"
          description: "Requested session ID"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        404:
          description: invalid session id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

